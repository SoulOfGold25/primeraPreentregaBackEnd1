<div>
    <h1>Home</h1>
    <h2>Lista de productos</h2>

    <p>Ordenar por: 
        <a href="/?sortBy=price&sortOrder=asc&available={{availableOnly}}">Precio â†‘</a> | 
        <a href="/?sortBy=price&sortOrder=desc&available={{availableOnly}}">Precio â†“</a> |
        <a href="/?sortBy=title&sortOrder=asc&available={{availableOnly}}">Nombre â†‘</a> |
        <a href="/?sortBy=title&sortOrder=desc&available={{availableOnly}}">Nombre â†“</a>
    </p>

    <p>Filtrar: 
        {{#if availableOnly}}
            <a href="/?sortBy={{sortBy}}&sortOrder={{sortOrder}}">Ver todos</a>
        {{else}}
            <a href="/?available=true&sortBy={{sortBy}}&sortOrder={{sortOrder}}">Solo disponibles</a>
        {{/if}}
    </p>

    <ul>
        {{#each docs}}
            <li>
                <strong>Nombre:</strong> {{this.title}} <br>
                <strong>Precio:</strong> ${{this.price}} <br>
                
                <!-- Enlace a la pÃ¡gina de detalles del producto -->
                <a href="/products/{{this._id}}">Ver detalles</a>

                <!-- BotÃ³n para agregar al carrito -->
                <button onclick="addToCart('{{this._id}}')">Agregar al carrito</button>
            </li>
        {{/each}}
    </ul>

<script>
    let cartId = null;

    // FunciÃ³n para obtener el cartId mÃ¡s reciente desde el servidor o crear uno nuevo si no existe
    async function fetchCartId() {
        try {
            const response = await fetch('/api/carts/latest');
            
            if (!response.ok) {
                // Si no se encuentra un carrito, se crea uno nuevo
                const createCartResponse = await fetch('/api/carts', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                const newCart = await createCartResponse.json();
                cartId = newCart._id;  // Usar el nuevo cartId creado
            } else {
                // Si el carrito ya existe, obtener su ID
                const data = await response.json();
                cartId = data.cartId;
            }

            console.log("Cart ID obtenido:", cartId);

            // Mostrar el enlace del carrito solo si cartId es vÃ¡lido
            if (cartId) {
                document.getElementById("cart-link").style.display = "inline-block";
                document.getElementById("cart-link").href = `/carts/${cartId}`;
            } else {
                console.log("No hay carrito activo.");
            }

        } catch (error) {
            console.error("Error al obtener el cartId:", error);
        }
    }

    // FunciÃ³n para agregar un producto al carrito
    async function addToCart(productId) {
        if (!cartId) await fetchCartId();  // Asegura que el cartId estÃ© disponible

        const response = await fetch(`/api/carts/${cartId}/products/${productId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ quantity: 1 })
        });

        const data = await response.json();
        if (data.success) {
            alert("Producto agregado al carrito");
        } else {
            alert("Error al agregar el producto");
        }
    }

    // Llamamos a la funciÃ³n para obtener el cartId al cargar la pÃ¡gina
    fetchCartId();
</script>

<!-- Enlace para ver el carrito, inicialmente oculto -->
<a id="cart-link" href="#" style="display:none;">ðŸ›’ Ver carrito</a>


    <p>PÃ¡gina {{page}} de {{totalPages}}</p>

    {{#if hasPrevPage}}
        <a href="/?page={{prevPage}}&sortBy={{sortBy}}&sortOrder={{sortOrder}}&available={{availableOnly}}">Anterior</a>
    {{/if}}

    {{#if hasNextPage}}
        <a href="/?page={{nextPage}}&sortBy={{sortBy}}&sortOrder={{sortOrder}}&available={{availableOnly}}">Siguiente</a>
    {{/if}}
</div>

<script src="/socket.io/socket.io.js"></script>

