<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Productos en Tiempo Real</title>
    <script src="/socket.io/socket.io.js"></script>
</head>
<body>
    <h1>Productos en Tiempo Real</h1>

    <!-- Formulario para crear un nuevo producto -->
    <form action="" id="formNewProducts">
        <input type="text" name="title" placeholder="Ingrese el título" required>
        <input type="text" name="description" placeholder="Ingrese la descripción" required>
        <input type="text" name="code" placeholder="Ingrese el código" required>
        <input type="number" name="price" placeholder="Ingrese el precio" required>
        <input type="number" name="stock" placeholder="Ingrese el stock" required>
        <input type="text" name="category" placeholder="Ingrese la categoría" required>
        <button type="submit">Enviar</button>
    </form>

    <!-- Lista de productos -->
    <ul id="productsList">
        {{#each products}}
            <li>
                {{this.title}} - {{this.price}}
                <button class="delete-btn" data-id="{{this._id}}">Eliminar</button>
            </li>
        {{/each}}
    </ul>

    <script>
        const socket = io();

        // Referencias al DOM
        const formNewProducts = document.getElementById("formNewProducts");
        const productsList = document.getElementById("productsList");

        // Manejar el envío del formulario para crear un producto
        formNewProducts.addEventListener("submit", (e) => {
            e.preventDefault();

            // Obtener los datos del formulario
            const formData = new FormData(formNewProducts);
            const productData = {};
            formData.forEach((value, key) => {
                productData[key] = value;
            });

            // Enviar los datos al servidor a través de WebSocket
            socket.emit("newProduct", productData);

            // Limpiar el formulario
            formNewProducts.reset();
        });

        // Escuchar actualizaciones de la lista de productos desde el servidor
        socket.on("updateProducts", (products) => {
            productsList.innerHTML = ""; // Limpiar la lista actual
            products.forEach((product) => {
                const li = document.createElement("li");
                li.innerHTML = `
                    ${product.title} - ${product.price}
                    <button class="delete-btn" data-id="${product._id}">Eliminar</button>
                `;
                productsList.appendChild(li);
            });

            // Agregar eventos a los botones "Eliminar"
            const deleteButtons = document.querySelectorAll(".delete-btn");
            deleteButtons.forEach((button) => {
                button.addEventListener("click", () => {
                    const productId = button.getAttribute("data-id");
                    socket.emit("deleteProductById", productId);
                });
            });
        });
    </script>
</body>
</html>